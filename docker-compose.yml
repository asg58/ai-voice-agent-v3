# AI Voice Agent Platform - Complete Service Stack (27 Containers)
# Updated according to EXPERT_STRUCTURE_ANALYSIS.md recommendations
# Optimized for faster downloads and builds

x-build-defaults: &build-defaults
  context: .
  args:
    BUILDKIT_INLINE_CACHE: 1
  cache_from:
    - type=local,src=/tmp/.buildx-cache
  cache_to:
    - type=local,dest=/tmp/.buildx-cache,mode=max

x-common-env: &common-env
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_NO_CACHE_DIR: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1

services:
  # ===================================================================
  # CORE INFRASTRUCTURE SERVICES (6)
  # ===================================================================
  postgres:
    image: postgres:15-alpine
    container_name: ai-voice-postgres
    environment:
      POSTGRES_DB: ai_voice_agent
      POSTGRES_USER: ai_user
      POSTGRES_PASSWORD: ai_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init:/docker-entrypoint-initdb.d
      - ./storage/postgres:/backup
    ports:
      - '5432:5432'
    networks:
      - ai-voice-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ai_user -d ai_voice_agent']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: ai-voice-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./storage/redis:/backup
    ports:
      - '6379:6379'
    networks:
      - ai-voice-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: ai-voice-weaviate
    ports:
      - '8090:8080'
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,generative-openai'
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - weaviate_data:/var/lib/weaviate
      - ./storage/weaviate:/backup
    networks:
      - ai-voice-network
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:8080/v1/.well-known/ready',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: ai-voice-minio
    command: server /data --console-address ":9001"
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minio_admin
      MINIO_ROOT_PASSWORD: minio_password
    volumes:
      - minio_data:/data
      - ./storage/minio:/backup
    networks:
      - ai-voice-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: ai-voice-elasticsearch
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ai-voice-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9200/_cluster/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1
  vault:
    image: hashicorp/vault:latest
    container_name: ai-voice-vault
    ports:
      - '8200:8200'
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=ai-voice-root-token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_LOCAL_CONFIG={"storage":{"file":{"path":"/vault/data"}},"listener":{"tcp":{"address":"0.0.0.0:8200","tls_disable":true}}}
    volumes:
      - vault_data:/vault/data
    cap_add:
      - IPC_LOCK
    networks:
      - ai-voice-network
    restart: unless-stopped
  # ===================================================================
  # CORE APPLICATION SERVICES (9)
  # ===================================================================
  core-engine:
    build:
      context: ./services/core-engine
      dockerfile: Dockerfile
    container_name: ai-voice-core-engine
    ports:
      - '8000:8000'
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_voice_agent
      - REDIS_URL=redis://redis:6379/0
      - WEAVIATE_URL=http://weaviate:8080
      - ENVIRONMENT=production
      - SERVICE_NAME=core-engine
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - MODEL_NAME=${MODEL_NAME:-gpt-4}
      - MAX_TOKENS=${MAX_TOKENS:-2000}
      - TEMPERATURE=${TEMPERATURE:-0.7}
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    networks:
      - ai-voice-network
    volumes:
      - ./shared:/app/shared:ro
      - ./storage:/app/storage
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
  realtime-voice:
    build:
      context: ./services/realtime-voice
      dockerfile: Dockerfile
    container_name: ai-voice-realtime-voice
    ports:
      - '8080:8080'
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_voice_agent
      - REDIS_URL=redis://redis:6379/1
      - CORE_ENGINE_URL=http://core-engine:8000
      - ENVIRONMENT=production
      - SERVICE_NAME=realtime-voice
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      core-engine:
        condition: service_healthy
    networks:
      - ai-voice-network
    volumes:
      - ./shared:/app/shared:ro
      - ./storage/realtime-voice:/app/storage
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  document-module:
    build:
      context: ./services/document-module
      dockerfile: Dockerfile
    container_name: ai-voice-document-module
    ports:
      - '8002:8002'
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_voice_agent
      - REDIS_URL=redis://redis:6379/2
      - CORE_ENGINE_URL=http://core-engine:8000
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESS_KEY=minio_admin
      - MINIO_SECRET_KEY=minio_password
      - ENVIRONMENT=production
      - SERVICE_NAME=document-module
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      core-engine:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - ai-voice-network
    volumes:
      - ./shared:/app/shared:ro
      - ./storage/documents:/app/storage
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8002/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  voice-module:
    build:
      context: ./services/voice-module
      dockerfile: Dockerfile
    container_name: ai-voice-voice-module
    ports:
      - '8001:8001'
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_voice_agent
      - REDIS_URL=redis://redis:6379/1
      - CORE_ENGINE_URL=http://core-engine:8000
      - ENVIRONMENT=production
      - SERVICE_NAME=voice-module
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      core-engine:
        condition: service_healthy
    networks:
      - ai-voice-network
    volumes:
      - ./shared:/app/shared:ro
      - ./storage/voice:/app/storage
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8001/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: ai-voice-api-gateway
    ports:
      - '8083:8080'
    environment:
      - CORE_ENGINE_URL=http://core-engine:8000
      - VOICE_MODULE_URL=http://voice-module:8001
      - REALTIME_VOICE_URL=http://realtime-voice:8080
      - DOCUMENT_MODULE_URL=http://document-module:8002
      - REDIS_URL=redis://redis:6379/3
      - ENVIRONMENT=production
      - SERVICE_NAME=api-gateway
    depends_on:
      redis:
        condition: service_healthy
      core-engine:
        condition: service_healthy
      voice-module:
        condition: service_healthy
      realtime-voice:
        condition: service_healthy
      document-module:
        condition: service_healthy
    networks:
      - ai-voice-network
    volumes:
      - ./shared:/app/shared:ro
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  dashboard:
    build:
      context: ./services/dashboard
      dockerfile: Dockerfile
    container_name: ai-voice-dashboard
    ports:
      - '3000:3000'
    environment:
      - API_GATEWAY_URL=http://api-gateway:8080
      - ENVIRONMENT=production
      - SERVICE_NAME=dashboard
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - ai-voice-network
    volumes:
      - ./shared:/app/shared:ro
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-voice-prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ai-voice-network
    restart: unless-stopped
  grafana:
    image: grafana/grafana:latest
    container_name: ai-voice-grafana
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - ai-voice-network
    restart: unless-stopped

  # Additional Application Services
  edge-ai:
    build:
      context: ./services/edge-ai
      dockerfile: Dockerfile
    container_name: ai-voice-edge-ai
    ports:
      - '8004:8000'
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_voice_agent
      - REDIS_URL=redis://redis:6379/4
      - CORE_ENGINE_URL=http://core-engine:8000
      - ENVIRONMENT=production
      - SERVICE_NAME=edge-ai
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      core-engine:
        condition: service_healthy
    networks:
      - ai-voice-network
    volumes:
      - ./shared:/app/shared:ro
      - ./storage/edge-ai:/app/storage
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  event-broker:
    build:
      context: ./services/event-broker
      dockerfile: Dockerfile
    container_name: ai-voice-event-broker
    ports:
      - '8005:8000'
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_voice_agent
      - REDIS_URL=redis://redis:6379/5
      - ENVIRONMENT=production
      - SERVICE_NAME=event-broker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-voice-network
    volumes:
      - ./shared:/app/shared:ro
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  event-streaming:
    build:
      context: ./services/event-streaming
      dockerfile: Dockerfile
    container_name: ai-voice-event-streaming
    ports:
      - '8006:8000'
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_voice_agent
      - REDIS_URL=redis://redis:6379/6
      - KAFKA_URL=kafka:9092
      - ENVIRONMENT=production
      - SERVICE_NAME=event-streaming
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - ai-voice-network
    volumes:
      - ./shared:/app/shared:ro
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  graphql-api:
    build:
      context: ./services/graphql-api
      dockerfile: Dockerfile
    container_name: ai-voice-graphql-api
    ports:
      - '8007:8000'
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_voice_agent
      - REDIS_URL=redis://redis:6379/7
      - CORE_ENGINE_URL=http://core-engine:8000
      - ENVIRONMENT=production
      - SERVICE_NAME=graphql-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      core-engine:
        condition: service_healthy
    networks:
      - ai-voice-network
    volumes:
      - ./shared:/app/shared:ro
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  service-discovery:
    build:
      context: ./services/service-discovery
      dockerfile: Dockerfile
    container_name: ai-voice-service-discovery
    ports:
      - '8008:8000'
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_voice_agent
      - REDIS_URL=redis://redis:6379/8
      - ENVIRONMENT=production
      - SERVICE_NAME=service-discovery
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-voice-network
    volumes:
      - ./shared:/app/shared:ro
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  service-mesh:
    build:
      context: ./services/service-mesh
      dockerfile: Dockerfile
    container_name: ai-voice-service-mesh
    ports:
      - '8009:8000'
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_voice_agent
      - REDIS_URL=redis://redis:6379/9
      - ENVIRONMENT=production
      - SERVICE_NAME=service-mesh
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-voice-network
    volumes:
      - ./shared:/app/shared:ro
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Infrastructure & Supporting Services
  nginx:
    image: nginx:alpine
    container_name: ai-voice-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - dashboard
    networks:
      - ai-voice-network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ai-voice-rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmq_user
      - RABBITMQ_DEFAULT_PASS=rabbitmq_password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ai-voice-network
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ai-voice-kafka
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - ai-voice-network
    healthcheck:
      test: ['CMD', 'kafka-broker-api-versions', '--bootstrap-server', 'kafka:9092']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: ai-voice-zookeeper
    ports:
      - '2181:2181'
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - ai-voice-network
    restart: unless-stopped
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: ai-voice-kibana
    ports:
      - '5601:5601'
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - ai-voice-network
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ai-voice-jaeger
    ports:
      - '16686:16686'
      - '14268:14268'
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - ai-voice-network
    restart: unless-stopped
  consul:
    image: hashicorp/consul:latest
    container_name: ai-voice-consul
    ports:
      - '8500:8500'
    command: agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0
    volumes:
      - consul_data:/consul/data
    networks:
      - ai-voice-network
    restart: unless-stopped
networks:
  ai-voice-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  weaviate_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  rabbitmq_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  elasticsearch_data:
    driver: local
  consul_data:
    driver: local
  vault_data:
    driver: local
