FROM python:3.11-slim

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libasound2 \
    libsndfile1 \
    ffmpeg \
    curl \
    build-essential \
    portaudio19-dev \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r voiceai && useradd -r -g voiceai voiceai

# Set working directory
WORKDIR /app

# Copy requirements files
COPY requirements*.txt ./

# Install Python dependencies
RUN pip install --upgrade pip setuptools wheel && \
    # Create a modified requirements file without PyAudio
    (grep -v "pyaudio" requirements.txt > requirements-no-pyaudio.txt || grep -v "pyaudio" requirements-prod.txt > requirements-no-pyaudio.txt || cp requirements.txt requirements-no-pyaudio.txt) && \
    pip install -r requirements-no-pyaudio.txt && \
    # Install PyAudio separately
    pip install sounddevice && \
    # Install additional dependencies including Neo4j
    pip install --no-cache-dir neo4j>=5.14.0 weaviate-client==3.25.3 openai==1.3.0 ollama>=0.1.0 \
    sqlalchemy==2.0.23 alembic==1.12.1 asyncpg==0.28.0 redis==5.0.1 aio_pika>=9.0.0 && \
    python -c "import weaviate; print(f'Weaviate client installed: {weaviate.__version__}')" && \
    python -c "import neo4j; print(f'Neo4j driver installed: {neo4j.__version__}')" && \
    python -c "import aio_pika; print(f'aio_pika installed: {aio_pika.__version__}')"

# Revert to using PyAudio
RUN apt-get update && apt-get install -y --no-install-recommends \
    portaudio19-dev \
    && rm -rf /var/lib/apt/lists/*

RUN pip install pyaudio --no-binary :all:

# Copy application code
COPY ./src ./src
COPY ./scripts ./scripts
COPY ./storage ./storage
COPY ./.env.example ./.env
COPY ./check_dependencies.py ./check_dependencies.py
COPY ./docker-entrypoint.sh ./docker-entrypoint.sh

# Create necessary directories
RUN mkdir -p /app/logs /app/storage/temp /app/storage/models \
    && chown -R voiceai:voiceai /app

# Set environment variables
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PORT=8080 \
    WORKERS=4 \
    WORKER_CLASS=uvicorn.workers.UvicornWorker

# Make entrypoint script executable
RUN chmod +x /app/docker-entrypoint.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Switch to non-root user
USER voiceai

# Default command
ENTRYPOINT ["/app/docker-entrypoint.sh"]