# Main Docker Compose Configuration
# AI Voice Agent Platform - Complete Service Stack

version: '3.8'

services:
  # Core Infrastructure Services
  postgres:
    image: postgres:15-alpine
    container_name: ai-voice-postgres
    environment:
      POSTGRES_DB: ai_voice_agent
      POSTGRES_USER: ai_user
      POSTGRES_PASSWORD: ai_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init:/docker-entrypoint-initdb.d
    ports:
      - '5432:5432'
    networks:
      - ai-voice-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ai_user -d ai_voice_agent']
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: ai-voice-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'
    networks:
      - ai-voice-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: ai-voice-weaviate
    ports:
      - '8090:8080'
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,generative-openai'
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - ai-voice-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/v1/.well-known/ready']
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:latest
    container_name: ai-voice-minio
    command: server /data --console-address ":9001"
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minio_admin
      MINIO_ROOT_PASSWORD: minio_password
    volumes:
      - minio_data:/data
    networks:
      - ai-voice-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 10s
      retries: 3

  # Core AI Services
  core-engine:
    build:
      context: ./services/core-engine
      dockerfile: Dockerfile
    container_name: ai-voice-core-engine
    ports:
      - '8000:8000'
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_voice_agent
      - REDIS_URL=redis://redis:6379/0
      - WEAVIATE_URL=http://weaviate:8080
      - ENVIRONMENT=production
      - SERVICE_NAME=core-engine
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    networks:
      - ai-voice-network
    volumes:
      - ./shared:/app/shared:ro
      - ./storage:/app/storage
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  realtime-voice:
    build:
      context: ./services/realtime-voice
      dockerfile: Dockerfile.simple
    container_name: ai-voice-realtime-voice
    ports:
      - '8080:8080'
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_voice_agent
      - REDIS_URL=redis://redis:6379/1
      - CORE_ENGINE_URL=http://core-engine:8000
      - ENVIRONMENT=production
      - SERVICE_NAME=realtime-voice
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      core-engine:
        condition: service_healthy
    networks:
      - ai-voice-network
    volumes:
      - ./shared:/app/shared:ro
      - ./storage/realtime-voice:/app/storage
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  document-module:
    build:
      context: ./services/document-module
      dockerfile: Dockerfile
    container_name: ai-voice-document-module
    ports:
      - '8002:8002'
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_voice_agent
      - REDIS_URL=redis://redis:6379/2
      - CORE_ENGINE_URL=http://core-engine:8000
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESS_KEY=minio_admin
      - MINIO_SECRET_KEY=minio_password
      - ENVIRONMENT=production
      - SERVICE_NAME=document-module
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      core-engine:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - ai-voice-network
    volumes:
      - ./shared:/app/shared:ro
      - ./storage/documents:/app/storage
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8002/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  voice-module:
    build:
      context: ./services/voice-module
      dockerfile: Dockerfile
    container_name: ai-voice-voice-module
    ports:
      - '8001:8001'
    environment:
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_voice_agent
      - REDIS_URL=redis://redis:6379/1
      - CORE_ENGINE_URL=http://core-engine:8000
      - ENVIRONMENT=production
      - SERVICE_NAME=voice-module
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      core-engine:
        condition: service_healthy
    networks:
      - ai-voice-network
    volumes:
      - ./shared:/app/shared:ro
      - ./storage/voice:/app/storage
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8001/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: ai-voice-api-gateway
    ports:
      - '8083:8080'
    environment:
      - CORE_ENGINE_URL=http://core-engine:8000
      - VOICE_MODULE_URL=http://voice-module:8001
      - REALTIME_VOICE_URL=http://realtime-voice:8080
      - DOCUMENT_MODULE_URL=http://document-module:8002
      - REDIS_URL=redis://redis:6379/3
      - ENVIRONMENT=production
      - SERVICE_NAME=api-gateway
    depends_on:
      redis:
        condition: service_healthy
      core-engine:
        condition: service_healthy
      voice-module:
        condition: service_healthy
      realtime-voice:
        condition: service_healthy
      document-module:
        condition: service_healthy
    networks:
      - ai-voice-network
    volumes:
      - ./shared:/app/shared:ro
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  dashboard:
    build:
      context: ./services/dashboard
      dockerfile: Dockerfile
    container_name: ai-voice-dashboard
    ports:
      - '3000:3000'
    environment:
      - API_GATEWAY_URL=http://api-gateway:8080
      - ENVIRONMENT=production
      - SERVICE_NAME=dashboard
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - ai-voice-network
    volumes:
      - ./shared:/app/shared:ro
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-voice-prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ai-voice-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: ai-voice-grafana
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - ai-voice-network
    restart: unless-stopped

networks:
  ai-voice-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  weaviate_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
